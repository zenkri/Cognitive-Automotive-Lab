#!/usr/bin/env python
"""
Add your desired parameters here. All required headers will be generated from this.
!!!IMPORTANT this file must be executable !!!

Use one of these commands to add parameters to your parameter struct:

def add(self, name, paramtype, description, level=0, edit_method='""', default=None, min=None, max=None, configurable=False, global_scope=False, constant=False):
        Adds parameters to your parameter struct.

def add_enum(self, name, description, entry_strings, default=None, paramtype='int'):
        Adds an enum to dynamic reconfigure

def add_group(self, name):
        Create a parameter group for the dynamic_reconfigure window

def add_publisher(self, name, message_type, description, default_topic=None, default_queue_size=5, topic_param=None,
                  queue_size_param=None, header=None, module=None, configurable=False, scope="private",
                  constant=False, diagnosed=False, min_frequency=0., min_frequency_param=None, max_delay=float('inf'),
                  max_delay_param=None):
        Adds an initialized publisher to your parameter struct and parameter for its topic and queue size.
        Diagnosed publishers require the line: gen.add_diagnostic_updater().


def add_subscriber(self, name, message_type, description, default_topic=None, default_queue_size=5, no_delay=False,
                   topic_param=None, queue_size_param=None, header=None, module=None, configurable=False,
                   scope='private', constant=False, diagnosed=False, min_frequency=0., min_frequency_param=None,
                   max_delay=float('inf'), max_delay_param=None):
        Adds an initialized subscriber to your parameter struct and parameters for topic and queue size.
        Diagnosed subscribers require the line: gen.add_diagnostic_updater().


For more information on the API, see here: https://gitlab.mrt.uni-karlsruhe.de/MRT/rosinterface_handler/blob/master/doc/HowToWriteYourFirstInterfaceFile.md
"""
from rosinterface_handler.interface_generator_catkin import *

gen = InterfaceGenerator()

# Add a parameter for changing verbosity (=log level) on the fly
gen.add_verbosity_param(configurable=True)

# Your Params here
gen.add("dummy", paramtype='double', description="My Dummy Parameter", default=0.1, min=0, max=1, configurable=True, global_scope=False)
gen.add("queue_size", paramtype="int", description="queue size", default=10, min=0, max=100, configurable=True)
gen.add("focal_length", paramtype="double", description="focal length of kinect2 (qhd)", default=540.686, configurable=False, global_scope=False)
gen.add("u0", paramtype='double', description="u0 in image of kinect2 (qhd)", default=479.75, configurable=False, global_scope=False)
gen.add("v0", paramtype='double', description="v0 in image of kinect2 (qhd)", default=269.75, configurable=False, global_scope=False)
gen.add("image_scaling", paramtype="double", description="image scaling to save processing time", default=0.5, min=0, max=1.0, configurable=True)
gen.add("kinect_offset", paramtype="double", description="translation(base line) between RGB camera and IR sensor", default=0.06, min=-0.3, max=0.3, configurable=True)
gen.add("hue_min", paramtype="int", description="minimum hue in the hsv image", default=152, min=0, max=180, configurable=True)
gen.add("hue_max", paramtype="int", description="maximum hue in the hsv image", default=180, min=0, max=180, configurable=True)
gen.add("saturation_min", paramtype="int", description="minimum saturation in the hsv image", default=92, min=0,max=255, configurable=True)
gen.add("saturation_max", paramtype="int", description="maximum saturation in the hsv image", default=255, min=0,max=255, configurable=True)
gen.add("value_min", paramtype="int", description="minimum value in the hsv image", default=120, min=0,max=255, configurable=True)
gen.add("value_max", paramtype="int", description="maximum value in the hsv image", default=255, min=0,max=255, configurable=True)
gen.add("depth_min", paramtype="double", description="minimum depth", default=0.4, min=0, max=4.5, configurable=True)
gen.add("depth_max", paramtype="double", description="maximum depth", default=2.4, min=0, max=4.5, configurable=True)
gen.add("cone_height_max", paramtype="double", description="max height of cone that will be considered", default=0.3, min=0, max=0.5, configurable=True)
gen.add("cone_height_min", paramtype="double", description="min height of cone that will be considered", default=0.1, min=-0.05, max=0.5, configurable=True)
gen.add("opening_element_size", paramtype="int", description="size of the structuring element for opening", default=5, min=0, max=100, configurable=True)


# Topics
topic = gen.add_group("Topics")
#topic.add("input_camera_info", paramtype="std::string", description="camera info topic", default="/kinect2/qhd/camera_info", configurable=False)
topic.add("input_image", paramtype="std::string", description="image topic", default="/kinect2/qhd/image_color_rect", configurable=False)
topic.add("input_depth", paramtype="std::string", description="depth topic", default="/kinect2/qhd/image_depth_rect", configurable=False)

# Frames
frame = gen.add_group("Frames")
frame.add("kinect_ir_frame", paramtype="std::string", description="frame id", default="kinect2_ir_optical_frame", configurable=False)
frame.add("world_frame", paramtype="std::string", description="frame id", default="world", configurable=False)

# Publisher and subscriber (group name will show up in dynamic_reconfigure window)
pub_sub = gen.add_group("Publisher and subscriber")
pub_sub.add_subscriber("dummy_subscriber", message_type="std_msgs::Header", description="example subscriber", default_topic="in_topic", no_delay=True, configurable=True)
pub_sub.add_publisher("dummy_publisher", message_type="std_msgs::Header", description="example publisher", default_topic="out_topic", configurable=True)


# DO NOT TOUCH THIS LINE
#Syntax : Package, Node, Config Name(The final name will be TrafficConesDetectionConfig)
exit(gen.generate("neverdrive_traffic_cones_ros_tool", "traffic_cones_detection", "TrafficConesDetection"))
